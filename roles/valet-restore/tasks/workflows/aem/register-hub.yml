#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- name: "Workflows » aem | register hub host"
  ansible.builtin.add_host:
    hostname: hub
    ansible_host: "{{ valet_sh_hub_host }}"
    ansible_port: "{{ valet_sh_hub_port }}"
    ansible_user: "{{ valet_sh_hub_user }}"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_pipelining: 1

- name: "Workflows » aem | get ssh fingerprint for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}'"
  ansible.builtin.shell: "ssh-keyscan -tecdsa -p {{ valet_sh_hub_port | string }} {{ valet_sh_hub_host }}"
  register: valet_sh_hub_host_ssh_fingerprint_obj

- name: "Workflows » aem | set known_host hash field name'"
  ansible.builtin.set_fact:
    valet_sh_known_host_hashed_name: "[{{ valet_sh_hub_host }}]:{{ valet_sh_hub_port | string }}"
  when: valet_sh_hub_port != 22 or valet_sh_hub_port != "22"

- name: "Workflows » aem | set known_host hash field name'"
  ansible.builtin.set_fact:
    valet_sh_known_host_hashed_name: "{{ valet_sh_hub_host }}"
  when: valet_sh_hub_port == 22 or valet_sh_hub_port == "22"

- name: "Workflows » aem | ensure ssh-key for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}' is in known_hosts"
  ansible.builtin.known_hosts:
    name: "{{ valet_sh_known_host_hashed_name }}"
    key: "{{ valet_sh_hub_host_ssh_fingerprint_obj.stdout }}"
    path: "~/.ssh/known_hosts"
    state: present

- name: "Workflows » aem | check if instancebackup idenfifier '{{ valet_instancebackup_identifier }}'"
  ansible.builtin.stat:
    path: "{{ valet_sh_project_vars.hub.path }}/{{ valet_instancebackup_identifier }}"
  register: instancebackup_identifier_target_obj
  delegate_to: hub

- name: "Workflows » aem | fail when instance identifier does not exist"
  ansible.builtin.fail:
    msg: "Instance-Backup identifier '{{ valet_instancebackup_identifier }}' does not exist!"
  when: not instancebackup_identifier_target_obj.stat.exists
