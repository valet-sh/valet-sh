#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- name: "Include 'vars.yml'"
  ansible.builtin.include_vars: "magento2.yml"

- name: "Include 'check-opts.yml'"
  ansible.builtin.include_tasks: "check-opts.yml"

- name: "Include 'check-vars.yml'"
  ansible.builtin.include_tasks: "check-vars.yml"

- name: "workflows » magento2 | register hub host"
  ansible.builtin.add_host:
    hostname: hub
    ansible_host: "{{ valet_sh_hub_host }}"
    ansible_port: "{{ valet_sh_hub_port }}"
    ansible_user: "{{ valet_sh_hub_user }}"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_pipelining: 1

- name: "workflows » magento2 | get ssh fingerprint for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}'"
  ansible.builtin.shell: "ssh-keyscan -tecdsa -p {{ valet_sh_hub_port | string }} {{ valet_sh_hub_host }}"
  register: valet_sh_hub_host_ssh_fingerprint_obj

- name: "workflows » magento2 | ensure ssh-key for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}' is in known_hosts"
  ansible.builtin.known_hosts:
    name: "[{{ valet_sh_hub_host }}]:{{ valet_sh_hub_port | string }}"
    key: "{{ valet_sh_hub_host_ssh_fingerprint_obj.stdout }}"
    path: "~/.ssh/known_hosts"
    state: present

- block:
    - name: "workflows » magento2 | check if instancebackup '{{ valet_sh_instance_db_filename }}' for identifier '{{ valet_instancebackup_identifier }}'"
      ansible.builtin.stat:
        path: "{{ valet_sh_project_vars.hub.path }}/auto/db/{{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }}"
      register: instancebackup_target_db_file_obj
      delegate_to: hub

    - name: "workflows » magento2 | fail when db dump '{{ valet_sh_instance_db_filename }}' does not exist"
      ansible.builtin.fail:
        msg: "file '{{ valet_sh_instance_db_filename }}' does not exist!"
      when: not instancebackup_target_db_file_obj.stat.exists

    - name: "workflows » magento2 | synchronize db dump {{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }}"
      ansible.builtin.shell: "rsync -aL -e 'ssh -p {{ valet_sh_hub_port }}' {{ valet_sh_hub_user }}@{{ valet_sh_hub_host }}:{{ valet_sh_project_vars.hub.path }}/auto/db/{{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }} {{ current_tmp_dir }}"

    - name: "workflows » magento2 | drop database '{{ valet_sh_project_database_name }}'"
      ansible.builtin.mysql_db:
        name: "{{ valet_sh_project_database_name }}"
        config_file: "{{ valet_sh_project_mysql_client_configuration }}"
        login_host: "127.0.0.1"
        login_port: "{{ valet_sh_project_mysql_server_port }}"
        state: absent

    - name: "workflows » magento2 | import db dump '{{ valet_sh_instance_db_filename }}' into database '{{ valet_sh_project_database_name }}'"
      ansible.builtin.mysql_db:
        name: "{{ valet_sh_project_database_name }}"
        target: "{{ current_tmp_dir }}/{{ valet_sh_instance_db_filename }}"
        config_file: "{{ valet_sh_project_mysql_client_configuration }}"
        login_host: "127.0.0.1"
        login_port: "{{ valet_sh_project_mysql_server_port }}"
        encoding: "utf8"
        state: import
  when: not valet_restore_skip_db|bool and (valet_opt_flag_skip_db is not defined or not valet_opt_flag_skip_db|bool)

- block:
    - name: "workflows » magento2 | check if instancebackup '{{ valet_sh_instance_db_filename }}' for identifier '{{ valet_instancebackup_identifier }}'"
      ansible.builtin.stat:
        path: "{{ valet_sh_project_vars.hub.path }}/auto/db/{{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }}"
      register: instancebackup_target_db_file_obj
      delegate_to: hub

    - name: "workflows » magento2 | fail when db dump '{{ valet_sh_instance_db_filename }}' in identifier '{{ valet_instancebackup_identifier }}' does not exist"
      ansible.builtin.fail:
        msg: "identifier '{{ valet_instancebackup_identifier }}' does not exist!"
      when: not instancebackup_target_db_file_obj.stat.exists

    - name: "workflows » magento2 | ensure sync directories exists"
      ansible.builtin.file:
        path: "{{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_fs }}"
        state: directory
      with_items: "{{ valet_sh_project_vars.instance.sync.fs }}"
      when:
        - valet_sh_project_vars.instance is defined
        - valet_sh_project_vars.instance.sync is defined
        - valet_sh_project_vars.instance.sync.fs is defined
      loop_control:
        loop_var: valet_sh_restore_current_fs
      tags:
        - skip_ansible_lint

    - name: "workflows » magento2 | synchronize filesystem"
      ansible.builtin.shell: "rsync -aL -e 'ssh -p {{ valet_sh_hub_port }}' {{ valet_sh_hub_user }}@{{ valet_sh_hub_host }}:{{ valet_sh_project_vars.hub.path }}/auto/fs/{{ valet_instancebackup_identifier }}/{{ valet_sh_restore_current_fs }}/ {{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_fs }}/" # noqa 204
      with_items: "{{ valet_sh_project_vars.instance.sync.fs }}"
      when:
        - valet_sh_project_vars.instance is defined
        - valet_sh_project_vars.instance.sync is defined
        - valet_sh_project_vars.instance.sync.fs is defined
      loop_control:
        loop_var: valet_sh_restore_current_fs
      tags:
        - skip_ansible_lint

  when: valet_opt_flag_skip_fs is not defined or not valet_opt_flag_skip_fs|bool

- name: "workflows » magento2 | run custom sql-queries for database '{{ valet_sh_project_database_name }}'"
  ansible.builtin.mysql_query:
    login_db: "{{ valet_sh_project_database_name }}"
    config_file: "{{ valet_sh_project_mysql_client_configuration }}"
    login_host: "127.0.0.1"
    login_port: "{{ valet_sh_project_mysql_server_port }}"
    query: "{{ valet_restore_current_custom_post_restore_sql_queries }}"
  with_items: "{{ valet_restore_custom_post_restore_sql_queries }}"
  loop_control:
    loop_var: valet_restore_current_custom_post_restore_sql_queries

- name: "workflows » magento2 | set var 'valet_restore_run_post_restore_commands'"
  ansible.builtin.set_fact:
    valet_restore_run_post_restore_commands: true

- name: "workflows » magento2 | override var 'valet_restore_run_post_restore_commands'"
  ansible.builtin.set_fact:
    valet_restore_run_post_restore_commands: false
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.sync is defined
    - valet_sh_project_vars.instance.sync.post_restore_actions is defined
    - valet_sh_project_vars.instance.sync.post_restore_actions.skip_default_commands is defined
    - valet_sh_project_vars.instance.sync.post_restore_actions.skip_default_commands|bool

- name: "workflows » magento2 | run post restore commands"
  ansible.builtin.shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_post_command }}"
  with_items: "{{ valet_restore_post_restore_commands }}"
  loop_control:
    loop_var: valet_sh_restore_current_post_command
  when: valet_restore_run_post_restore_commands

- name: "workflows » magento2 | run custom post restore commands"
  ansible.builtin.shell: "{{ valet_sh_restore_current_custom_post_command }}"
  args:
    chdir: "{{ valet_current_path }}/{{ valet_project_src_dir }}"
  with_items: "{{ valet_restore_custom_post_restore_commands }}"
  loop_control:
    loop_var: valet_sh_restore_current_custom_post_command

- name: "Block"
  block:
    - name: "workflows » magento2 | run full reindex when defined in .valet-sh.yml"
      ansible.builtin.shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/bin/magento indexer:reindex"
      when:
        - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindexAll is defined
        - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindexAll|bool

    - name: "workflows » magento2 | run custom indexer commands defined in .valet-sh.yml"
      ansible.builtin.shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/bin/magento indexer:reindex {{ valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindex | join(' ') }}"
      when:
        - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindex is defined
        - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindex
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.sync is defined
    - valet_sh_project_vars.instance.sync.post_restore_actions is defined
    - valet_sh_project_vars.instance.sync.post_restore_actions.indexer is defined
    - valet_opt_flag_skip_db is not defined or not valet_opt_flag_skip_db|bool
