##
#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- name: "Include 'check-opts.yml'"
  ansible.builtin.include_tasks: check-opts.yml

- name: "Block: check essential packages and install requested packages"
  when:
    - vsh_install_packages is defined
    - vsh_install_packages | length > 0
  block:
    - name: "include 'sub-check-essential-packages.yml'"
      ansible.builtin.include_tasks: sub-check-essential-packages.yml
      with_items: "{{ vsh_packages }}"
      loop_control:
        loop_var: vsh_packages_item
      when:
        - vsh_packages_item.essential is defined
        - vsh_packages_item.essential|bool

    - name: "install requested packages"
      ansible.builtin.include_tasks: sub-install-requested-packages.yml
      with_items: "{{ vsh_install_packages }}"
      loop_control:
        loop_var: vsh_install_packages_item

- name: "Block: install essential packages as not other have been requested"
  when: (vsh_install_packages is not defined) or (vsh_install_packages | length == 0)
  block:
    - name: "include 'sub-install-essential-packages.yml'"
      ansible.builtin.include_tasks: sub-install-essential-packages.yml
      with_dict: "{{ vsh_packages }}"
      loop_control:
        loop_var: vsh_packages_item
      when:
        - vsh_packages_item.value.essential is defined
        - vsh_packages_item.value.essential|bool

    - name: "include 'sub-install-optional-packages.yml'"
      ansible.builtin.include_tasks: sub-install-optional-packages.yml
      with_dict: "{{ vsh_packages }}"
      loop_control:
        loop_var: vsh_packages_item
      when: vsh_packages_item.value.essential is not defined or not vsh_packages_item.value.essential|bool

- name: "include 'sub-install-all-packages.yml'"
  ansible.builtin.include_tasks: sub-install-all-packages.yml
  with_dict: "{{ vsh_packages }}"
  loop_control:
    loop_var: vsh_packages_item
  when:
    - (vsh_install_packages is not defined) or (vsh_install_packages | length == 0)
    - vsh_opt_flag_all | bool

# vsh_packages_default

# - name: "Include role"
#  ansible.builtin.include_role:
#    name: "{{ valet_install_default_roles_item }}"
#    public: true
#  with_items: "{{ valet_install_default_roles }}"
#  loop_control:
#    loop_var: valet_install_default_roles_item

# - name: "Include role"
#  ansible.builtin.include_role:
#    name: "valet-service"
#  vars:
#    valet_sh_service_internal_action: true
#    valet_service_action: "handle"

# - name: "Include certificate role"
#  ansible.builtin.include_role:
#    name: "certificate"
#    public: true

# - name: "Ensure revision is up2date"
#  ansible.builtin.copy:
#    src: "{{ valet_dist_path }}/{{ valet_etc_revision_filename }}"
#    dest: "{{ valet_etc_revision_file }}"
#    mode: '0644'
#    force: true
