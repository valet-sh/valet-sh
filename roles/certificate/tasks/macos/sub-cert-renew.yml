##
#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- name: "check if file '{{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}' exists"
  ansible.builtin.stat:
    path: "{{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}"
  register: available_dev_certs_item_cert_pem

- name: Block
  when: available_dev_certs_item_cert_pem.stat.exists|bool
  block:
    - name: "check if '{{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}' is signed by current CA"
      ansible.builtin.shell: "openssl verify -verbose -CAfile {{ certificate_ca_cert_file }} {{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}"
      failed_when: false
      register: current_cert_ca_chain_check_obj

    - name: "check if '{{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}' expires in less than 6 months"
      ansible.builtin.shell: "openssl x509 -checkend 15552000 -noout -in {{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}"
      failed_when: false
      register: current_cert_expires_check_obj

    - name: "reset var 'current_cert_has_invalid_key_usage'"
      ansible.builtin.set_fact:
        current_cert_has_invalid_key_usage: false

    - name: "check for invalid key usage in '{{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}'"
      ansible.builtin.shell: "openssl x509 -noout -ext keyUsage < {{ available_dev_certs_item.path }}/{{ certificate_server_cert_filename }}"
      register: current_cert_invalid_key_usage_check_obj

    - name: "set var 'current_cert_has_invalid_key_usage' to true if certificate contains invalid key usage"
      ansible.builtin.set_fact:
        current_cert_has_invalid_key_usage: true
      when: "'Key Encipherment, Data Encipherment' in current_cert_invalid_key_usage_check_obj.stdout"

    - name: "Block"
      when: current_cert_expires_check_obj.rc == 1 or current_cert_ca_chain_check_obj.rc != 0 or current_cert_has_invalid_key_usage|bool
      block:
        - name: "set 'current_cert_name' var"
          ansible.builtin.set_fact:
            current_cert_name: "{{ available_dev_certs_item.path | basename }}"

        - name: "delete current certificate '{{ available_dev_certs_item.path }}'"
          ansible.builtin.file:
            path: "{{ available_dev_certs_item.path }}"
            state: absent
          become: true
          notify: "brew | nginx | restarted"

        - name: "Include 'sub-server'"
          ansible.builtin.include_tasks: sub-server.yml
          vars:
            cert_prefix: "{{ current_cert_name.split('.')[:-1] | join('.') }}"
