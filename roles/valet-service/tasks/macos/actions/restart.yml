##
#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

# @FIXME fix handing on arm

- name: "actions » restart | fail when no service name was given"
  ansible.builtin.fail:
    msg: "no service name was given"
  when: (valet_service_name is not defined) or (valet_service_name | length == 0)

- name: "actions » restart | set default homebrew bin"
  ansible.builtin.set_fact:
    valet_sh_homebrew_current_bin: "{{ valet_sh_homebrew_bin }}"

- name: "actions » restart | override homebrew bin path if service is rabbitmq"
  ansible.builtin.set_fact:
    valet_sh_homebrew_current_bin: "{{ valet_sh_homebrew_bin_arm64 }}"
  when: valet_service_name == "rabbitmq"

- name: "Block"
  when: valet_service_name == "all"
  ansible.builtin.block:
    - name: "actions » restart all | include valet services file"
      ansible.builtin.include_vars:
        file: "{{ valet_etc_services_file }}"
        name: valet_sh_services_obj

    - name: "actions » restart all | merge service states"
      ansible.builtin.set_fact:
        valet_sh_services_current_states: "{{ valet_sh_service_state_preset | combine(valet_sh_services_obj.states) }}"

    - debug:
        msg: "{{ valet_sh_services_current_states }}"

    - debug:
        msg: "{{ valet_sh_services_current_states_item }}"
      with_dict: "{{ valet_sh_services_current_states }}"
      loop_control:
        loop_var: valet_sh_services_current_states_item
      when: valet_sh_services_current_states_item.value|bool

    - ansible.builtin.include_tasks: "actions/sub-restart-all.yml"
      vars:
        valet_current_service_item: "{{ valet_sh_services_current_states_item }}"
      with_dict: "{{ valet_sh_services_current_states }}"
      loop_control:
        loop_var: valet_sh_services_current_states_item
      when: valet_sh_services_current_states_item.value|bool

- name: "Block"
  when: valet_service_name != "all"
  ansible.builtin.block:
    - name: "actions » restart | check fuzzy service names"
      ansible.builtin.set_fact:
        valet_service_name: "{{ valet_sh_available_php_versions_alias_mapping_item.0.target }}"
      when: valet_service_name in valet_sh_available_php_versions_alias_mapping_item.1
      with_subelements:
        - "{{ valet_sh_service_fuzzy_alias_mapping }}"
        - aliases
      loop_control:
        loop_var: valet_sh_available_php_versions_alias_mapping_item

    - name: "actions » restart | check for alias service name"
      ansible.builtin.set_fact:
        valet_service_name_alias: "{{ item.value }}"
      when: item.key == valet_service_name
      with_dict: "{{ valet_sh_service_alias_mapping }}"

    - name: "actions » restart | restart {{ valet_service_name }} service (running as root)"
      ansible.builtin.shell: "sudo {{ valet_sh_homebrew_bin }} services restart {{ valet_service_name }}"
      when: valet_service_name_alias|length == 0 and (valet_service_name in valet_sh_service_privileged_services)

    - name: "actions » restart | restart {{ valet_service_name }} service"
      ansible.builtin.shell: "{{ valet_sh_homebrew_bin }} services restart {{ valet_service_name }}"
      when: valet_service_name_alias|length == 0 and (valet_service_name not in valet_sh_service_privileged_services)

    - name: "actions » restart | restart {{ valet_service_name }} service with alias '{{ valet_service_name_alias }}' (running as root)"
      ansible.builtin.shell: "sudo {{ valet_sh_homebrew_bin }} services restart {{ valet_service_name_alias }}"
      when: valet_service_name_alias|length > 0 and (valet_service_name in valet_sh_service_privileged_services)

    - name: "actions » restart | restart {{ valet_service_name }} service"
      ansible.builtin.shell: "{{ valet_sh_homebrew_bin }} services restart {{ valet_service_name_alias }}"
      when: valet_service_name_alias|length > 0 and (valet_service_name not in valet_sh_service_privileged_services)
