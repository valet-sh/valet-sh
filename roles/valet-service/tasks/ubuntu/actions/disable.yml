##
#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- name: "actions » disable | fail when no service name was given"
  ansible.builtin.fail:
    msg: "no service name was given"
  when: (valet_service_name is not defined) or (valet_service_name | length == 0)

- name: "actions » disable | check fuzzy service names"
  ansible.builtin.set_fact:
    valet_service_name: "{{ valet_sh_available_php_versions_alias_mapping_item.0.target }}"
  when: valet_service_name in valet_sh_available_php_versions_alias_mapping_item.1
  with_subelements:
    - "{{ valet_sh_service_fuzzy_alias_mapping }}"
    - aliases
  loop_control:
    loop_var: valet_sh_available_php_versions_alias_mapping_item

- name: "actions » disable | check for alias service name"
  ansible.builtin.set_fact:
    valet_service_name_alias: "{{ item.value }}"
  when: item.key == valet_service_name
  with_dict: "{{ valet_sh_service_alias_mapping }}"

- name: "actions » disable | disable {{ valet_service_name }} service"
  ansible.builtin.systemd:
    name: "{{ valet_service_name }}"
    enabled: false
    state: stopped
  become: true
  when: valet_service_name_alias|length == 0

- name: "actions » disable | disable {{ valet_service_name }} service"
  ansible.builtin.systemd:
    name: "{{ valet_service_name_alias }}"
    enabled: false
    state: stopped
  become: true
  when: valet_service_name_alias|length > 0

- name: "actions » disable | include valet services file"
  ansible.builtin.include_vars:
    file: "{{ valet_etc_services_file }}"
    name: valet_sh_services_obj

- name: "actions » disable | prepare new config element"
  ansible.builtin.set_fact:
    new_service_state_element: "{ '{{ valet_service_name }}': false }"

- name: "actions » disable | update service object"
  ansible.builtin.set_fact:
    valet_sh_services_updated_states: "{{ valet_sh_services_obj.states | combine(new_service_state_element) }}"

- name: "actions » disable | merge objects"
  ansible.builtin.set_fact:
    valet_sh_services_obj:
      states: "{{ valet_sh_services_updated_states }}"
      defaults: "{{ valet_sh_services_obj.defaults }}"

- name: "actions » disable | transform object into nice yaml output"
  ansible.builtin.set_fact:
    valet_etc_services_list: "{{ valet_sh_services_obj | to_nice_yaml(width=50, explicit_start=True, explicit_end=True) }}"

- name: "actions » disable | write new services.yml file"
  ansible.builtin.copy:
    content: "{{ valet_etc_services_list }}"
    dest: "{{ valet_etc_services_file }}"
    mode: '0644'
  become: true
