##
#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- name: "Block"
  when:
    - current_os == "ubuntu"
    - valet_sh_project_vars.services is defined
    - valet_sh_project_vars.services.elasticsearch is defined
    - valet_sh_project_vars.services.elasticsearch.version is defined
  block:
    - name: "workflows » neos » services » elasticsearch | ensure elasticsearch{{ valet_sh_project_vars.services.elasticsearch.version }} is started"
      ansible.builtin.systemd:
        name: "elasticsearch{{ valet_sh_project_vars.services.elasticsearch.version }}"
        state: started
        enabled: true
      become: true

    - name: "workflows » neos » services » elasticsearch | include valet services file"
      ansible.builtin.include_vars:
        file: "{{ valet_etc_services_file }}"
        name: valet_sh_services_obj

    - name: "workflows » neos » services » elasticsearch | prepare new config element"
      ansible.builtin.set_fact:
        new_service_state_element: "{ 'elasticsearch{{ valet_sh_project_vars.services.elasticsearch.version }}': true }"

    - name: "workflows » neos » services » elasticsearch | update service object"
      ansible.builtin.set_fact:
        valet_sh_services_updated_states: "{{ valet_sh_services_obj.states | combine(new_service_state_element) }}"

    - name: "workflows » neos » services » elasticsearch | merge objects"
      ansible.builtin.set_fact:
        valet_sh_services_obj:
          states: "{{ valet_sh_services_updated_states }}"
          defaults: "{{ valet_sh_services_obj.defaults }}"

    - name: "workflows » neos » services » elasticsearch | transform object into nice yaml output"
      ansible.builtin.set_fact:
        valet_etc_services_list: "{{ valet_sh_services_obj | to_nice_yaml(width=50, explicit_start=True, explicit_end=True) }}"

    - name: "workflows » neos » services » elasticsearch | write new services.yml file"
      ansible.builtin.copy:
        content: "{{ valet_etc_services_list }}"
        dest: "{{ valet_etc_services_file }}"
        mode: '0644'
      become: true

    - name: "workflows » neos » services » elasticsearch | wait for elasticsearch to be reachable"
      ansible.builtin.wait_for:
        port: "{{ valet_sh_elasticsearch_ports[valet_sh_project_vars.services.elasticsearch.version] }}"
        delay: 5

    - name: "workflows » neos » services » elasticsearch | set 'valet_sh_neos_elasticsearch_version' var"
      ansible.builtin.set_fact:
        valet_sh_neos_elasticsearch_version: "{{ valet_sh_project_vars.services.elasticsearch.version }}"

- name: "Block"
  when:
    - current_os == "mac"
    - valet_sh_project_vars.services is defined
    - valet_sh_project_vars.services.elasticsearch is defined
    - valet_sh_project_vars.services.elasticsearch.version is defined
  block:
    - name: "workflows » neos » services » elasticsearch | ensure elasticsearch{{ valet_sh_project_vars.services.elasticsearch.version }} is started"
      ansible.builtin.shell: "{{ valet_sh_homebrew_bin }} services start vsh-elasticsearch{{ valet_sh_project_vars.services.elasticsearch.version }}"

    - name: "workflows » neos » services » elasticsearch | include valet services file"
      ansible.builtin.include_vars:
        file: "{{ valet_etc_services_file }}"
        name: valet_sh_services_obj

    - name: "workflows » neos » services » elasticsearch | prepare new config element"
      ansible.builtin.set_fact:
        new_service_state_element: "{ 'elasticsearch{{ valet_sh_project_vars.services.elasticsearch.version }}': true }"

    - name: "workflows » neos » services » elasticsearch | update service object"
      ansible.builtin.set_fact:
        valet_sh_services_updated_states: "{{ valet_sh_services_obj.states | combine(new_service_state_element) }}"

    - name: "workflows » neos » services » elasticsearch | merge objects"
      ansible.builtin.set_fact:
        valet_sh_services_obj:
          states: "{{ valet_sh_services_updated_states }}"
          defaults: "{{ valet_sh_services_obj.defaults }}"

    - name: "workflows » neos » services » elasticsearch | transform object into nice yaml output"
      ansible.builtin.set_fact:
        valet_etc_services_list: "{{ valet_sh_services_obj | to_nice_yaml(width=50, explicit_start=True, explicit_end=True) }}"

    - name: "workflows » neos » services » elasticsearch | write new services.yml file"
      ansible.builtin.copy:
        content: "{{ valet_etc_services_list }}"
        dest: "{{ valet_etc_services_file }}"
        mode: '0644'

    - name: "workflows » neos » services » elasticsearch | wait for elasticsearch to be reachable"
      ansible.builtin.wait_for:
        port: "{{ valet_sh_elasticsearch_ports[valet_sh_project_vars.services.elasticsearch.version] }}"
        delay: 5

    - name: "workflows » neos » services » elasticsearch | set 'valet_sh_neos_elasticsearch_version' var"
      ansible.builtin.set_fact:
        valet_sh_neos_elasticsearch_version: "{{ valet_sh_project_vars.services.elasticsearch.version | int }}"

## TODO: implement plugin installation for elasticsearch based on .valet-sh.yml file
